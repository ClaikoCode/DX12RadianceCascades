import os
import sys
import hashlib

def ThisPrint(message):
    print("CreateShaderIDs.py: " + message)

def ShaderID(shaderID):
    return "ShaderID" + shaderID

def ShaderIDEntry(shaderID):
    return "\t" + ShaderID(shaderID)

def HashDirectory(dir):
    # Sort for consistency.
    dirFiles = sorted(os.listdir(dir))

    # Separate each filename with a separator to remove ambiguity due to string concatination. 
    uniqueFilenameString = "|".join(dirFiles)

    return hashlib.md5(uniqueFilenameString.encode()).hexdigest()

solutionDir = sys.argv[1] if len(sys.argv) > 1 else ".\\"
projectDir = solutionDir + "DX12RadianceCascades\\"
shaderDir = projectDir + "Assets\\shaders\\"
targetDir = projectDir + "src\\"
outputFile = "ShaderIDs.h"
targetPath = targetDir + outputFile

currentHash =  HashDirectory(shaderDir)

prevHash = None
if os.path.exists(targetPath):
    with open(targetPath, "r") as f:
        firstLine = f.readline().strip()

        if firstLine.startswith("// Hash:"):
            prevHash = firstLine.split(':')[1]

if prevHash == currentHash:
    ThisPrint(f"Hash for shader directory [{shaderDir}] has not been changed. Skipping header file creation.")
    quit()
else:
    ThisPrint(f"Shader directory [{shaderDir}] has been modified.")

ThisPrint(f"Writing shader IDs to '{targetPath}'")
with open(targetPath, "w") as f:
    shaderIDToFilenameDict = {}

    f.write("// Hash:" + currentHash + "\n")
    f.write("// This file is autogenerated and should not be edited.\n\n")
    f.write("#pragma once\n\n")
    f.write("#include <cstdint>\n")
    f.write("#include <unordered_map>\n\n")

    f.write("enum ShaderID : uint64_t\n")
    f.write("{\n")
    f.write(ShaderIDEntry("None") + "= 0,\n")
    for shaderFile in os.listdir(shaderDir):
        if shaderFile.endswith(".hlsl"):
            shaderFileName = shaderFile[:-5] # Dont include .hlsl
            f.write(ShaderIDEntry(shaderFileName) + ",\n")

            shaderIDToFilenameDict[ShaderID(shaderFileName)] = shaderFile

    f.write("\n" + ShaderIDEntry("Count") + " // Keep last!\n")

    f.write("};\n\n")

    f.write("// Maps shader ID enums to filenames.\n")
    f.write("static const std::unordered_map<ShaderID, std::wstring> s_ShaderIDFilenameMap = {\n")
    
    # Each entry looks like: { ShaderIDShaderIDName, L"ShaderFileName.hlsl" },
    for shaderID, filename in shaderIDToFilenameDict.items():
        f.write("\t{ ")
        f.write(f"{shaderID}, L\"{filename}\"") 
        f.write(" },\n")
        
    f.write("};\n")

ThisPrint("Done.")